//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Git\Other\AntlrMiniProject\AntlrCSharp\Antlr\Create.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CreateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, UPPERCASE=9, 
		LOWERCASE=10, DIGIT=11, PROPERTY=12, IDENTIFIER=13, WORD=14, WHITESPACE=15;
	public const int
		RULE_create = 0, RULE_with = 1, RULE_declaration = 2, RULE_propertydeclaration = 3, 
		RULE_declarationlist = 4, RULE_identifiernamedeclaration = 5, RULE_identifiertype = 6, 
		RULE_createType = 7, RULE_class = 8, RULE_interface = 9, RULE_record = 10;
	public static readonly string[] ruleNames = {
		"create", "with", "declaration", "propertydeclaration", "declarationlist", 
		"identifiernamedeclaration", "identifiertype", "createType", "class", 
		"interface", "record"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'with'", "','", "':'", "'?'", "'class'", "'interface'", 
		"'record'", null, null, null, "'property'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "UPPERCASE", "LOWERCASE", 
		"DIGIT", "PROPERTY", "IDENTIFIER", "WORD", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Create.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CreateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CreateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CreateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CreateParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CreateParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateTypeContext createType() {
			return GetRuleContext<CreateTypeContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 0, RULE_create);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(T__0);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) {
				{
				State = 23;
				createType();
				}
			}

			State = 26;
			Match(IDENTIFIER);
			State = 27;
			with();
			State = 28;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationlistContext declarationlist() {
			return GetRuleContext<DeclarationlistContext>(0);
		}
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 2, RULE_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(T__1);
			State = 31;
			declarationlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertydeclarationContext propertydeclaration() {
			return GetRuleContext<PropertydeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			propertydeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(CreateParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiernamedeclarationContext[] identifiernamedeclaration() {
			return GetRuleContexts<IdentifiernamedeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiernamedeclarationContext identifiernamedeclaration(int i) {
			return GetRuleContext<IdentifiernamedeclarationContext>(i);
		}
		public PropertydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertydeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertydeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertydeclarationContext propertydeclaration() {
		PropertydeclarationContext _localctx = new PropertydeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_propertydeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(PROPERTY);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				identifiernamedeclaration();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationlistContext declarationlist() {
		DeclarationlistContext _localctx = new DeclarationlistContext(Context, State);
		EnterRule(_localctx, 8, RULE_declarationlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			declaration();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 42;
				Match(T__2);
				State = 43;
				declaration();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiernamedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CreateParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiertypeContext identifiertype() {
			return GetRuleContext<IdentifiertypeContext>(0);
		}
		public IdentifiernamedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiernamedeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiernamedeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiernamedeclarationContext identifiernamedeclaration() {
		IdentifiernamedeclarationContext _localctx = new IdentifiernamedeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_identifiernamedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(IDENTIFIER);
			State = 50;
			Match(T__3);
			State = 51;
			identifiertype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiertypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CreateParser.IDENTIFIER, 0); }
		public IdentifiertypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiertype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiertype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiertypeContext identifiertype() {
		IdentifiertypeContext _localctx = new IdentifiertypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifiertype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(IDENTIFIER);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 54;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public CreateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTypeContext createType() {
		CreateTypeContext _localctx = new CreateTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_createType);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				@class();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				@interface();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				record();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 16, RULE_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 18, RULE_interface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICreateVisitor<TResult> typedVisitor = visitor as ICreateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 20, RULE_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'G', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1B', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x6', '\x5', '(', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', ')', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '/', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x32', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', ':', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'?', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\x2', 
		'\x2', '\x41', '\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', '\x2', '\x2', '\b', 
		'%', '\x3', '\x2', '\x2', '\x2', '\n', '+', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '>', '\x3', '\x2', '\x2', '\x2', '\x12', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x42', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\a', '\x3', '\x2', 
		'\x2', '\x19', '\x1B', '\x5', '\x10', '\t', '\x2', '\x1A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\xF', '\x2', 
		'\x2', '\x1D', '\x1E', '\x5', '\x4', '\x3', '\x2', '\x1E', '\x1F', '\a', 
		'\x2', '\x2', '\x3', '\x1F', '\x3', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\x4', '\x2', '\x2', '!', '\"', '\x5', '\n', '\x6', '\x2', '\"', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', 
		'$', '\a', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\a', '\xE', '\x2', 
		'\x2', '&', '(', '\x5', '\f', '\a', '\x2', '\'', '&', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '\t', '\x3', 
		'\x2', '\x2', '\x2', '+', '\x30', '\x5', '\x6', '\x4', '\x2', ',', '-', 
		'\a', '\x5', '\x2', '\x2', '-', '/', '\x5', '\x6', '\x4', '\x2', '.', 
		',', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\xF', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\x6', '\x2', '\x2', '\x35', '\x36', '\x5', '\xE', 
		'\b', '\x2', '\x36', '\r', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', 
		'\a', '\xF', '\x2', '\x2', '\x38', ':', '\a', '\a', '\x2', '\x2', '\x39', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', 
		'\x2', ':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '?', '\x5', '\x12', 
		'\n', '\x2', '<', '?', '\x5', '\x14', '\v', '\x2', '=', '?', '\x5', '\x16', 
		'\f', '\x2', '>', ';', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\a', '\b', '\x2', '\x2', '\x41', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\t', '\x2', '\x2', 
		'\x43', '\x15', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\n', 
		'\x2', '\x2', '\x45', '\x17', '\x3', '\x2', '\x2', '\x2', '\a', '\x1A', 
		')', '\x30', '\x39', '>',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
